
=================== TERM # 2 ===========================
Dynamic memory malloc/free 
  do not worry for callor or realloc 
  for every malloc / free
  malloc.c

How to declare arrays with malloc 
  malloc (sizeof(int) * times);

How to declare and use 2D arrays:
  malloc2d.c   int matrix
  malloc (sizeof(int *) * rows)
  for every row malloc(sizeof(int));

How to use malloc to create arrays of pointers
  farm.c exercise

SELF REFERENCING STRUCTS  
  any struct that can point to istself ... NODE

LINKEDLIST:
  Insert, delete, print (Traverse) etc.
  linkedlist.c
  doublelinkedlist.c
  expand.c

STACKs
  Like a linkedlsit but with rules
  push()
  pop()

FILES:
  Text files read and write
  binary files read / write / seek (move the cursor at will)
  



=================== TERM # 1 ===========================

Things you should ALREADY know:
  structs
  typedef | defines
  basic data types {int, char, arrays, structs, float}

New this class (term #1): (parcial 1)
  Poiters 
    (pointer_basics.c)
  Pointer arithmetic
    (pointer_math.c)
    (pointer_math_practice.c)
  Pointes to structures  ( struct.elem vs struct->elem)
    (structs.c)
    (struct_practice_cars.c)
  Passing variables as Value or referece.
    (value_vs_reference.c)
    (value_vs_reference_practice.c)
  Function pointers
    (func_pointers.c)
    (func_ptr_challenge.c)
  VOID pointer
    (void_ptr_basics.c)
    (void_structs_student.c)
  Array of pointers (ptr **)
    (array_pointers_dptr.c)

The exercise (challenge.c) contains a good practice for the exam.

EXAM: FEB 25TH!

One more line